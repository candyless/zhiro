<?xml version="1.0" encoding="UTF-8"?>
<beans 	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	    xmlns:tx="http://www.springframework.org/schema/tx"
	    xmlns:aop="http://www.springframework.org/schema/aop"
	    xmlns:context="http://www.springframework.org/schema/context"
	    xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	    xmlns="http://www.springframework.org/schema/beans"
	    xsi:schemaLocation="
	    http://www.springframework.org/schema/beans 
	    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	  	http://www.springframework.org/schema/context
	   	http://www.springframework.org/schema/context/spring-context-4.0.xsd
	   	http://www.springframework.org/schema/tx
	    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	    http://www.springframework.org/schema/aop
	  	http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

	 <context:property-placeholder location="classpath:config.properties" />
	 <context:component-scan base-package="com.less.zhiro.service" />
	
	  <!-- ========================================配置数据源========================================= -->
    <!-- 配置数据源，使用的是alibaba的Druid(德鲁伊)数据源 -->
    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.user}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="0" />
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="20" />
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="20" />
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="0" />
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="60000" />
        <!-- 
        <property name="poolPreparedStatements" value="true" /> 
        <property name="maxPoolPreparedStatementPerConnectionSize" value="33" /> 
        -->
        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <property name="testWhileIdle" value="true" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="25200000" />
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="true" />
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="1800" />
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true" />
        <!-- 监控数据库 -->
        <!-- <property name="filters" value="stat" /> -->
        <property name="filters" value="mergeStat" />
    </bean>
    
    <!-- ========================================分隔线========================================= -->
    
    <!-- ========================================针对myBatis的配置项============================== -->
    <!-- 配置sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描me/目录下的所有SQL映射的xml文件, 省掉Configuration.xml里的手工配置-->
        <property name="mapperLocations" value="classpath:com/less/zhiro/mapper/*.xml" />
    </bean>
    <!-- 配置扫描器 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描me.gacl.dao这个包以及它的子包下的所有映射接口类 -->
        <property name="basePackage" value="com.less.zhiro.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>
    
     <!-- ========================================分隔线========================================= -->
    
    <!-- ========================================针对shiro============================== -->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.MemorySessionDAO"></bean>  

	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">    
        <constructor-arg name="name" value="SHRIOSESSIONID"/>
    </bean>    
      
    <!-- 配置shiro session 的一个管理器 -->  
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
    	<property name="sessionDAO" ref="sessionDAO"/>
    	<property name="sessionIdUrlRewritingEnabled" value="false" />
   		<property name="globalSessionTimeout" value="1800000"/>    
	    <property name="deleteInvalidSessions" value="true"/>    
	    <property name="sessionValidationSchedulerEnabled" value="true"/>    
	    <property name="sessionValidationInterval" value="1800000"/>    
	    <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>  
      
    <!-- 配置shiro 缓存的一个管理器 -->  
    <bean id="shiroCacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager"></bean>  
  
    <!-- 配置 Shiro 的 SecurityManager Bean. -->  
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
        <!--  <property name="cacheManager" ref="cacheManager"/>-->  
        <property name="realm" ref="shiroDbRealm"/>  
       <!-- shiro缓存管理器 -->  
        <property name="cacheManager" ref="shiroCacheManager"></property>  
        <!-- shiro session管理器 -->  
        <property name="sessionManager" ref="sessionManager"></property>  
    </bean>  

	<!-- Customized Realm -->
	<bean id="shiroDbRealm" class="com.less.zhiro.realm.ShiroDbRealm">	
		<property name="cacheManager" ref="cacheManager"/>
	</bean>

	<!-- Shiro Filter -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/login/" />
		<property name="successUrl" value="/success"/>
		<property name="unauthorizedUrl" value="/error/noperms" />
		<property name="filterChainDefinitions">
			<value>
				/success = authc
				/login/getverificode = anon
				/login/resetpwd = anon
				/userlogin/* = anon
				/home/homepage = anon
				/logout/* = anon
				/assets/** = anon
				/css/* = anon
				/font/* = anon
				/avatars/* = anon
				/js/* = anon
				/img/* = anon
				/login/ = anon
				/login/login = anon
				/** = authc
			</value>
		</property>
	</bean>

	<!-- Cache -->
	<bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" />

	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>

	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>
	
</beans>
